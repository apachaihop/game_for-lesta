def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

Properties properties_for_sdl3 = new Properties()
properties_for_sdl3.load(project.rootProject.file('local.properties').newDataInputStream())
def sdl3Dir = properties_for_sdl3.getProperty('sdl3.dir')
if (sdl3Dir == null)
{
    throw new IllegalArgumentException("no [sdl3.dir] property in [local.properties] file")
}

Properties properties_for_glm = new Properties()
properties_for_glm.load(project.rootProject.file('local.properties').newDataInputStream())
def glmDir = properties_for_glm.getProperty('glm.dir')
if (glmDir == null)
{
    throw new IllegalArgumentException("no [glmDir] property in [local.properties] file")
}
Properties properties_for_sdl_ttf = new Properties()
properties_for_sdl_ttf .load(project.rootProject.file('local.properties').newDataInputStream())
def sdl3_ttf_Dir = properties_for_glm.getProperty('sdl3ttf.dir')
if (sdl3_ttf_Dir == null)
{
    throw new IllegalArgumentException("no [sdl3_ttf_Dir] property in [local.properties] file")
}
Properties properties_for_freetype = new Properties()
properties_for_freetype  .load(project.rootProject.file('local.properties').newDataInputStream())
def freetype_Dir = properties_for_glm.getProperty('freetype.dir')
if (freetype_Dir == null)
{
    throw new IllegalArgumentException("no [freetype_Dir] property in [local.properties] file")
}
android {
    compileSdk 33
    ndkVersion '25.2.9519653'

    defaultConfig {
        if (buildAsApplication) {
            applicationId "org.libsdl.app"
        }
        minSdkVersion 16
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
        externalNativeBuild {

             cmake {
                 arguments "-DANDROID_STL=c++_shared", "-DSDL3_SRC_DIR=$sdl3Dir", "-DGLM_SRC_DIR=$glmDir","-DSDL_TTF_DIR=$sdl3_ttf_Dir","-DFREETYPE_DIR=$freetype_Dir"
             }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    applicationVariants.all { variant ->
        tasks["merge${variant.name.capitalize()}Assets"]
            .dependsOn("externalNativeBuild${variant.name.capitalize()}")
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {

             cmake {
                 path '../../CMakeLists.txt'
             }
        }
       
    }
    lintOptions {
        abortOnError false
    }

    namespace 'org.libsdl.app'

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.libsdl.app.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
